%{
	#include "parser.h"
	#include "hw3_aux.h"
	#include <iostream>
	#include <stdlib.h>

	using namespace std;
	extern int yylex();
	int yyerror(const char * message);

	symbol* symbols = new symbol() ;
    string func_ret_type;
    int loopsCnt=0;
%}


%right ASSIGN
%left OR
%left AND
%left PRERELOP
%nonassoc POSTRELOP
%left PREBINOP
%left POSTBINOP
%right NOT
%left LPAREN RPAREN
%left LBRACE RBRACE
%right IF
%nonassoc ELSE
%nonassoc WHILE
%nonassoc VOID
%nonassoc ID
%nonassoc INT
%nonassoc BYTE
%nonassoc STRING
%nonassoc BOOL
%nonassoc NUM
%nonassoc B
%nonassoc RETURN
%nonassoc CONTINUE
%nonassoc BREAK
%nonassoc TRUE
%nonassoc FALSE
%nonassoc SC
%nonassoc COMMA

%%


Program : INIT Funcs  {symbols->does_main_exist(); output::endScope(); symbols->PrintScope(symbols->t_stack[0]); }
;

INIT: {symbols->init_global_table();}
;

Funcs : FuncDecl Funcs  								{}
      | 			    											{}
;

FuncDecl :  RetType ID  LPAREN  Formals RPAREN {func_ret_type= $1->type; symbols->decl_func($2->name , $4->type , $1->type , $4->name  ,yylineno) ;} LBRACE Statements RBRACE END_SCOPE {}
;

RetType : Type  															{$$ = new Node($1->name, $1->type);}
        | VOID 																{$$ = new Node($1->name, $1->type);}
;

Formals : FormalsList   											{$$ = new Node($1->name, $1->type);}
        |						    											{$$ = new Node("", "");}
;

FormalsList : FormalDecl    									{$$ = new Node($1->name, $1->type);}
            |  FormalDecl COMMA FormalsList   {$$ = new Node($1->name + "," + $3->name, $1->type + "," + $3->type);}
;

FormalDecl : Type ID    											{$$ = new Node($2->name, $1->type);}
;

Statements: Statement 								{}
          | Statements Statement 					{}
;

Statement : LBRACE NEW_SCOPE Statements RBRACE END_SCOPE {}
	      	|	Type ID SC 							  {symbols->add_var($2->name, $1->type, false, yylineno);}
	      	|	Type ID ASSIGN Exp SC 				  {symbols->check_types($1->type, $4->type, yylineno); symbols->add_var($2->name, $1->type, false, yylineno); symbols->assign($2->name, $4->type, yylineno);}
	      	|	ID ASSIGN Exp SC 		              {symbols->assign($1->name, $2->type, yylineno);}
	      	|	Call SC										                {}
	      	|	RETURN SC									                {symbols->check_types("void", func_ret_type , yylineno);}
	      	|	RETURN Exp SC 						 		            {symbols->check_types($1->type, func_ret_type , yylineno);}
	      	|	IF NEW_SCOPE LPAREN Exp {symbols->check_types("BOOL",$4->type, yylineno);} RPAREN Statement                                   {output::endScope(); symbols->PrintScope(symbols->t_stack.back()); symbols->remove_scope();}
	      	//|	IF NEW_SCOPE LPAREN Exp {symbols->check_types("BOOL",$4->type, yylineno);} RPAREN Statement {output::endScope(); symbols->PrintScope(symbols->t_stack.back()); symbols->remove_scope();} ELSE NEW_SCOPE Statement   {output::endScope(); symbols->PrintScope(symbols->t_stack.back()); symbols->remove_scope();}
	      	|	WHILE {loopsCnt++;} NEW_SCOPE LPAREN Exp {symbols->check_types("BOOL",$5->type, yylineno);} RPAREN Statement 				        {output::endScope(); symbols->PrintScope(symbols->t_stack.back()); symbols->remove_scope(); loopsCnt--;}
	      	//|	WHILE {loopsCnt++;} NEW_SCOPE LPAREN Exp {symbols->check_types("BOOL",$5->type, yylineno);} RPAREN Statement ELSE NEW_SCOPE Statement  {output::endScope(); symbols->PrintScope(symbols->t_stack.back()); symbols->remove_scope(); loopsCnt--;}
	      	|	BREAK SC	 	   {symbols->insideLoop(loopsCnt , "break" , yylineno);}
	      	|	CONTINUE SC	       {symbols->insideLoop(loopsCnt , "continue" , yylineno);}
;

NEW_SCOPE :     {symbols->add_scope();}
;

END_SCOPE :      {output::endScope(); symbols->PrintScope(symbols->t_stack.back()); symbols->remove_scope();}
;

Call : ID LPAREN ExplList RPAREN  {$$=new Node("", symbols->funcType($1->name, $3->type , yylineno));}
	 | ID LPAREN RPAREN			 		  	{$$=new Node("", symbols->funcType($1->name, "", yylineno));}
;

ExplList : Exp 									{$$ = new Node($1->name, $1->type);}
		 |	Exp COMMA ExplList  		{$$ = new Node($1->name + "," + $3->name, $1->type + "," + $3->type);}
;

Type :  INT   									{}  //{$$ = new Node("", "INT");}
	 |	BYTE 									{} //{$$ = new Node("", "BYTE");}
     |	BOOL								    {} //{$$ = new Node("", "BOOL");}
;

Exp : LPAREN Exp RPAREN				 {$$ = new Node($2->name, $2->type);}
	|	Exp PREBINOP Exp				 	 {symbols->check_types($1->type, "INT", yylineno); symbols->check_types($3->type, "INT", yylineno); $$ = new Node("", symbols->larger($1->type, $3->type));}
	|	Exp POSTBINOP Exp				 	 {symbols->check_types($1->type, "INT", yylineno); symbols->check_types($3->type, "INT", yylineno); $$ = new Node("", symbols->larger($1->type, $3->type));}
	|	ID 								 				 {$$ = symbols->makeNodeFromID($1->name,yylineno);}
	|	Call							 				 {$$ = new Node("", $1->type);}
	|	NUM 							 				 {$$ = new Node("", "INT");}
	|	NUM B							 				 {$$ = new Node("", "BYTE");}
	|	STRING 							 			 {$$ = new Node("", "STRING");}
	|	TRUE							 				 {$$ = new Node("true", "BOOL");}
	|	FALSE 							 			 {$$ = new Node("false", "BOOL");}
	|	NOT Exp 						 			 {symbols->check_types($2->type, "BOOL", yylineno); $$ = new Node("", "BOOL");}
	|	Exp AND Exp 					 		 {symbols->check_types($1->type, "BOOL", yylineno); symbols->check_types($3->type, "BOOL", yylineno); $$ = new Node("", "BOOL");}
	|	Exp OR Exp 						 		 {symbols->check_types($1->type, "BOOL", yylineno); symbols->check_types($3->type, "BOOL", yylineno); $$ = new Node("", "BOOL");}
	|	Exp PRERELOP Exp 		 	     {symbols->check_types($1->type, "INT", yylineno); symbols->check_types($3->type, "INT", yylineno); $$ = new Node("", "BOOL");}
	|	Exp POSTRELOP Exp 		 		 {symbols->check_types($1->type, "INT", yylineno); symbols->check_types($3->type, "INT", yylineno); $$ = new Node("", "BOOL");}
;


%%

int main()
{
	yyparse();
}

int yyerror(const char * msg)
{
	output::errorSyn(yylineno);
	exit(0);
}
